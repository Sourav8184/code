import {inject, Getter} from '@loopback/core';
import {DefaultCrudRepository, repository, HasManyRepositoryFactory} from '@loopback/repository';
import {MysqlDataSource} from '../datasources';
import {Author, AuthorRelations, Book} from '../models';
import {BookRepository} from './book.repository';

export class AuthorRepository extends DefaultCrudRepository<
  Author,
  typeof Author.prototype.id,
  AuthorRelations
> {
  public readonly books: HasManyRepositoryFactory<Book, typeof Author.prototype.id>;

  constructor(
    @inject('datasources.mysql') dataSource: MysqlDataSource,
    @repository.getter('BookRepository') protected bookRepositoryGetter: Getter<BookRepository>,
  ) {
    super(Author, dataSource);
    this.books = this.createHasManyRepositoryFactoryFor('books', bookRepositoryGetter);
    this.registerInclusionResolver('books', this.books.inclusionResolver);
  }
}



import {inject, Getter} from '@loopback/core';
import {DefaultCrudRepository, repository, BelongsToAccessor} from '@loopback/repository';
import {MysqlDataSource} from '../datasources';
import {Book, BookRelations, Author, Category} from '../models';
import {AuthorRepository} from './author.repository';
import {CategoryRepository} from './category.repository';

export class BookRepository extends DefaultCrudRepository<
  Book,
  typeof Book.prototype.bookId,
  BookRelations
> {
  public readonly author: BelongsToAccessor<Author, typeof Book.prototype.bookId>;
  public readonly category: BelongsToAccessor<Category, typeof Book.prototype.bookId>;

  constructor(
    @inject('datasources.mysql') dataSource: MysqlDataSource,
    @repository.getter('AuthorRepository') protected authorRepositoryGetter: Getter<AuthorRepository>,
    @repository.getter('CategoryRepository') protected categoryRepositoryGetter: Getter<CategoryRepository>,
  ) {
    super(Book, dataSource);

    this.author = this.createBelongsToAccessorFor('author', authorRepositoryGetter);
    this.registerInclusionResolver('author', this.author.inclusionResolver);

    this.category = this.createBelongsToAccessorFor('category', categoryRepositoryGetter);
    this.registerInclusionResolver('category', this.category.inclusionResolver);
  }
}




import {inject, Getter} from '@loopback/core';
import {DefaultCrudRepository, repository, HasManyRepositoryFactory} from '@loopback/repository';
import {MysqlDataSource} from '../datasources';
import {Category, CategoryRelations, Book} from '../models';
import {BookRepository} from './book.repository';

export class CategoryRepository extends DefaultCrudRepository<
  Category,
  typeof Category.prototype.id,
  CategoryRelations
> {
  public readonly books: HasManyRepositoryFactory<Book, typeof Category.prototype.id>;

  constructor(
    @inject('datasources.mysql') dataSource: MysqlDataSource,
    @repository.getter('BookRepository') protected bookRepositoryGetter: Getter<BookRepository>,
  ) {
    super(Category, dataSource);
    this.books = this.createHasManyRepositoryFactoryFor('books', bookRepositoryGetter);
    this.registerInclusionResolver('books', this.books.inclusionResolver);
  }
}






const authorWithBooks = await authorRepository.find({
  include: [{relation: 'books'}],
});



const bookWithDetails = await bookRepository.find({
  include: [{relation: 'author'}, {relation: 'category'}],
});


const categoryWithBooks = await categoryRepository.find({
  include: [{relation: 'books'}],
});
